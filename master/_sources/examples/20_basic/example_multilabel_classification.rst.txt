
.. DO NOT EDIT.
.. THIS FILE WAS AUTOMATICALLY GENERATED BY SPHINX-GALLERY.
.. TO MAKE CHANGES, EDIT THE SOURCE PYTHON FILE:
.. "examples/20_basic/example_multilabel_classification.py"
.. LINE NUMBERS ARE GIVEN BELOW.

.. only:: html

    .. note::
        :class: sphx-glr-download-link-note

        Click :ref:`here <sphx_glr_download_examples_20_basic_example_multilabel_classification.py>`
        to download the full example code or to run this example in your browser via Binder

.. rst-class:: sphx-glr-example-title

.. _sphx_glr_examples_20_basic_example_multilabel_classification.py:


==========================
Multi-label Classification
==========================

This examples shows how to format the targets for a multilabel classification
problem. Details on multilabel classification can be found
`here <https://scikit-learn.org/stable/modules/multiclass.html>`_.

.. GENERATED FROM PYTHON SOURCE LINES 10-19

.. code-block:: default

    import numpy as np

    import sklearn.datasets
    import sklearn.metrics
    from sklearn.utils.multiclass import type_of_target

    import autosklearn.classification









.. GENERATED FROM PYTHON SOURCE LINES 20-22

Data Loading
============

.. GENERATED FROM PYTHON SOURCE LINES 22-43

.. code-block:: default


    # Using reuters multilabel dataset -- https://www.openml.org/d/40594
    X, y = sklearn.datasets.fetch_openml(data_id=40594, return_X_y=True, as_frame=False)

    # fetch openml downloads a numpy array with TRUE/FALSE strings. Re-map it to
    # integer dtype with ones and zeros
    # This is to comply with Scikit-learn requirement:
    # "Positive classes are indicated with 1 and negative classes with 0 or -1."
    # More information on: https://scikit-learn.org/stable/modules/multiclass.html
    y[y == 'TRUE'] = 1
    y[y == 'FALSE'] = 0
    y = y.astype(np.int)

    # Using type of target is a good way to make sure your data
    # is properly formatted
    print(f"type_of_target={type_of_target(y)}")

    X_train, X_test, y_train, y_test = sklearn.model_selection.train_test_split(
        X, y, random_state=1
    )





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    /home/runner/work/auto-sklearn/auto-sklearn/examples/20_basic/example_multilabel_classification.py:33: DeprecationWarning: `np.int` is a deprecated alias for the builtin `int`. To silence this warning, use `int` by itself. Doing this will not modify any behavior and is safe. When replacing `np.int`, you may wish to use e.g. `np.int64` or `np.int32` to specify the precision. If you wish to review your current use, check the release note link for additional information.
    Deprecated in NumPy 1.20; for more details and guidance: https://numpy.org/devdocs/release/1.20.0-notes.html#deprecations
      y = y.astype(np.int)
    type_of_target=multilabel-indicator




.. GENERATED FROM PYTHON SOURCE LINES 44-46

Building the classifier
=======================

.. GENERATED FROM PYTHON SOURCE LINES 46-57

.. code-block:: default


    automl = autosklearn.classification.AutoSklearnClassifier(
        time_left_for_this_task=60,
        per_run_time_limit=30,
        # Bellow two flags are provided to speed up calculations
        # Not recommended for a real implementation
        initial_configurations_via_metalearning=0,
        smac_scenario_args={'runcount_limit': 1},
    )
    automl.fit(X_train, y_train, dataset_name='reuters')





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none


    AutoSklearnClassifier(initial_configurations_via_metalearning=0,
                          per_run_time_limit=30,
                          smac_scenario_args={'runcount_limit': 1},
                          time_left_for_this_task=60)



.. GENERATED FROM PYTHON SOURCE LINES 58-60

Print the final ensemble constructed by auto-sklearn
====================================================

.. GENERATED FROM PYTHON SOURCE LINES 60-63

.. code-block:: default


    print(automl.show_models())





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    [(1.000000, SimpleClassificationPipeline({'balancing:strategy': 'none', 'classifier:__choice__': 'random_forest', 'data_preprocessing:categorical_transformer:categorical_encoding:__choice__': 'one_hot_encoding', 'data_preprocessing:categorical_transformer:category_coalescence:__choice__': 'minority_coalescer', 'data_preprocessing:numerical_transformer:imputation:strategy': 'mean', 'data_preprocessing:numerical_transformer:rescaling:__choice__': 'standardize', 'feature_preprocessor:__choice__': 'no_preprocessing', 'classifier:random_forest:bootstrap': 'True', 'classifier:random_forest:criterion': 'gini', 'classifier:random_forest:max_depth': 'None', 'classifier:random_forest:max_features': 0.5, 'classifier:random_forest:max_leaf_nodes': 'None', 'classifier:random_forest:min_impurity_decrease': 0.0, 'classifier:random_forest:min_samples_leaf': 1, 'classifier:random_forest:min_samples_split': 2, 'classifier:random_forest:min_weight_fraction_leaf': 0.0, 'data_preprocessing:categorical_transformer:category_coalescence:minority_coalescer:minimum_fraction': 0.01},
    dataset_properties={
      'task': 3,
      'sparse': False,
      'multilabel': True,
      'multiclass': False,
      'target_type': 'classification',
      'signed': False})),
    ]




.. GENERATED FROM PYTHON SOURCE LINES 64-66

Print statistics about the auto-sklearn run
===========================================

.. GENERATED FROM PYTHON SOURCE LINES 66-71

.. code-block:: default


    # Print statistics about the auto-sklearn run such as number of
    # iterations, number of models failed with a time out.
    print(automl.sprint_statistics())





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    auto-sklearn results:
      Dataset name: reuters
      Metric: f1_macro
      Best validation score: 0.552850
      Number of target algorithm runs: 1
      Number of successful target algorithm runs: 1
      Number of crashed target algorithm runs: 0
      Number of target algorithms that exceeded the time limit: 0
      Number of target algorithms that exceeded the memory limit: 0





.. GENERATED FROM PYTHON SOURCE LINES 72-74

Get the Score of the final ensemble
===================================

.. GENERATED FROM PYTHON SOURCE LINES 74-77

.. code-block:: default


    predictions = automl.predict(X_test)
    print("Accuracy score", sklearn.metrics.accuracy_score(y_test, predictions))




.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    Accuracy score 0.606





.. rst-class:: sphx-glr-timing

   **Total running time of the script:** ( 0 minutes  17.008 seconds)


.. _sphx_glr_download_examples_20_basic_example_multilabel_classification.py:


.. only :: html

 .. container:: sphx-glr-footer
    :class: sphx-glr-footer-example


  .. container:: binder-badge

    .. image:: images/binder_badge_logo.svg
      :target: https://mybinder.org/v2/gh/automl/auto-sklearn/master?urlpath=lab/tree/notebooks/examples/20_basic/example_multilabel_classification.ipynb
      :alt: Launch binder
      :width: 150 px


  .. container:: sphx-glr-download sphx-glr-download-python

     :download:`Download Python source code: example_multilabel_classification.py <example_multilabel_classification.py>`



  .. container:: sphx-glr-download sphx-glr-download-jupyter

     :download:`Download Jupyter notebook: example_multilabel_classification.ipynb <example_multilabel_classification.ipynb>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.github.io>`_
