
.. DO NOT EDIT.
.. THIS FILE WAS AUTOMATICALLY GENERATED BY SPHINX-GALLERY.
.. TO MAKE CHANGES, EDIT THE SOURCE PYTHON FILE:
.. "examples/40_advanced/example_calc_multiple_metrics.py"
.. LINE NUMBERS ARE GIVEN BELOW.

.. only:: html

    .. note::
        :class: sphx-glr-download-link-note

        Click :ref:`here <sphx_glr_download_examples_40_advanced_example_calc_multiple_metrics.py>`
        to download the full example code or to run this example in your browser via Binder

.. rst-class:: sphx-glr-example-title

.. _sphx_glr_examples_40_advanced_example_calc_multiple_metrics.py:


=======
Metrics
=======

In *Auto-sklearn*, model is optimized over a metric, either built-in or
custom metric. Moreover, it is also possible to calculate multiple metrics
per run. The following examples show how to calculate metrics built-in
and self-defined metrics for a classification problem.

.. GENERATED FROM PYTHON SOURCE LINES 12-34

.. code-block:: default


    import autosklearn.classification
    import numpy as np
    import pandas as pd
    import sklearn.datasets
    import sklearn.metrics
    from autosklearn.metrics import balanced_accuracy, precision, recall, f1


    def error(solution, prediction):
        # custom function defining error
        return np.mean(solution != prediction)


    def get_metric_result(cv_results):
        results = pd.DataFrame.from_dict(cv_results)
        results = results[results['status'] == "Success"]
        cols = ['rank_test_scores', 'param_classifier:__choice__', 'mean_test_score']
        cols.extend([key for key in cv_results.keys() if key.startswith('metric_')])
        return results[cols]









.. GENERATED FROM PYTHON SOURCE LINES 35-37

Data Loading
============

.. GENERATED FROM PYTHON SOURCE LINES 37-42

.. code-block:: default


    X, y = sklearn.datasets.load_breast_cancer(return_X_y=True)
    X_train, X_test, y_train, y_test = \
        sklearn.model_selection.train_test_split(X, y, random_state=1)








.. GENERATED FROM PYTHON SOURCE LINES 43-45

Build and fit a classifier
==========================

.. GENERATED FROM PYTHON SOURCE LINES 45-61

.. code-block:: default


    error_rate = autosklearn.metrics.make_scorer(
        name='custom_error',
        score_func=error,
        optimum=0,
        greater_is_better=False,
        needs_proba=False,
        needs_threshold=False
    )
    cls = autosklearn.classification.AutoSklearnClassifier(
        time_left_for_this_task=120,
        per_run_time_limit=30,
        scoring_functions=[balanced_accuracy, precision, recall, f1, error_rate]
    )
    cls.fit(X_train, y_train, X_test, y_test)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none


    AutoSklearnClassifier(per_run_time_limit=30,
                          scoring_functions=[balanced_accuracy, precision, recall,
                                             f1, custom_error],
                          time_left_for_this_task=120)



.. GENERATED FROM PYTHON SOURCE LINES 62-64

Get the Score of the final ensemble
===================================

.. GENERATED FROM PYTHON SOURCE LINES 64-71

.. code-block:: default


    predictions = cls.predict(X_test)
    print("Accuracy score", sklearn.metrics.accuracy_score(y_test, predictions))

    print("#" * 80)
    print("Metric results")
    print(get_metric_result(cls.cv_results_).to_string(index=False))




.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    Accuracy score 0.958041958041958
    ################################################################################
    Metric results
     rank_test_scores param_classifier:__choice__  mean_test_score  metric_balanced_accuracy  metric_precision  metric_recall  metric_f1  metric_custom_error
                    3               random_forest         0.971631                  0.969533          0.977528       0.977528   0.977528             0.028369
                    9                         mlp         0.964539                  0.955920          0.956522       0.988764   0.972376             0.035461
                   12                         mlp         0.950355                  0.944685          0.955556       0.966292   0.960894             0.049645
                    9               random_forest         0.964539                  0.959918          0.966667       0.977528   0.972067             0.035461
                    3                         mlp         0.971631                  0.961538          0.956989       1.000000   0.978022             0.028369
                    1                 extra_trees         0.985816                  0.984767          0.988764       0.988764   0.988764             0.014184
                    3               random_forest         0.971631                  0.969533          0.977528       0.977528   0.977528             0.028369
                   11                 extra_trees         0.957447                  0.954300          0.966292       0.966292   0.966292             0.042553
                    3               random_forest         0.971631                  0.969533          0.977528       0.977528   0.977528             0.028369
                    3               random_forest         0.971631                  0.969533          0.977528       0.977528   0.977528             0.028369
                    3                         mlp         0.971631                  0.965536          0.967033       0.988764   0.977778             0.028369
                    2                         mlp         0.978723                  0.971154          0.967391       1.000000   0.983425             0.021277





.. rst-class:: sphx-glr-timing

   **Total running time of the script:** ( 1 minutes  55.719 seconds)


.. _sphx_glr_download_examples_40_advanced_example_calc_multiple_metrics.py:


.. only :: html

 .. container:: sphx-glr-footer
    :class: sphx-glr-footer-example


  .. container:: binder-badge

    .. image:: images/binder_badge_logo.svg
      :target: https://mybinder.org/v2/gh/automl/auto-sklearn/master?urlpath=lab/tree/notebooks/examples/40_advanced/example_calc_multiple_metrics.ipynb
      :alt: Launch binder
      :width: 150 px


  .. container:: sphx-glr-download sphx-glr-download-python

     :download:`Download Python source code: example_calc_multiple_metrics.py <example_calc_multiple_metrics.py>`



  .. container:: sphx-glr-download sphx-glr-download-jupyter

     :download:`Download Jupyter notebook: example_calc_multiple_metrics.ipynb <example_calc_multiple_metrics.ipynb>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.github.io>`_
