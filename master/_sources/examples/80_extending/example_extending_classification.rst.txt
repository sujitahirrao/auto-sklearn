
.. DO NOT EDIT.
.. THIS FILE WAS AUTOMATICALLY GENERATED BY SPHINX-GALLERY.
.. TO MAKE CHANGES, EDIT THE SOURCE PYTHON FILE:
.. "examples/80_extending/example_extending_classification.py"
.. LINE NUMBERS ARE GIVEN BELOW.

.. only:: html

    .. note::
        :class: sphx-glr-download-link-note

        Click :ref:`here <sphx_glr_download_examples_80_extending_example_extending_classification.py>`
        to download the full example code or to run this example in your browser via Binder

.. rst-class:: sphx-glr-example-title

.. _sphx_glr_examples_80_extending_example_extending_classification.py:


====================================================
Extending Auto-Sklearn with Classification Component
====================================================

The following example demonstrates how to create a new classification
component for using in auto-sklearn.

.. GENERATED FROM PYTHON SOURCE LINES 9-26

.. code-block:: default


    from ConfigSpace.configuration_space import ConfigurationSpace
    from ConfigSpace.hyperparameters import CategoricalHyperparameter, \
        UniformIntegerHyperparameter, UniformFloatHyperparameter

    import sklearn.metrics
    import autosklearn.classification
    import autosklearn.pipeline.components.classification
    from autosklearn.pipeline.components.base \
        import AutoSklearnClassificationAlgorithm
    from autosklearn.pipeline.constants import DENSE, SIGNED_DATA, UNSIGNED_DATA, \
        PREDICTIONS

    from sklearn.datasets import load_breast_cancer
    from sklearn.model_selection import train_test_split









.. GENERATED FROM PYTHON SOURCE LINES 27-29

Create MLP classifier component for auto-sklearn
================================================

.. GENERATED FROM PYTHON SOURCE LINES 29-121

.. code-block:: default


    class MLPClassifier(AutoSklearnClassificationAlgorithm):
        def __init__(self,
                     hidden_layer_depth,
                     num_nodes_per_layer,
                     activation,
                     alpha,
                     solver,
                     random_state=None,
                     ):
            self.hidden_layer_depth = hidden_layer_depth
            self.num_nodes_per_layer = num_nodes_per_layer
            self.activation = activation
            self.alpha = alpha
            self.solver = solver
            self.random_state = random_state

        def fit(self, X, y):
            self.num_nodes_per_layer = int(self.num_nodes_per_layer)
            self.hidden_layer_depth = int(self.hidden_layer_depth)
            self.alpha = float(self.alpha)

            from sklearn.neural_network import MLPClassifier
            hidden_layer_sizes = tuple(self.num_nodes_per_layer for i in range(self.hidden_layer_depth))

            self.estimator = MLPClassifier(hidden_layer_sizes=hidden_layer_sizes,
                                           activation=self.activation,
                                           alpha=self.alpha,
                                           solver=self.solver,
                                           random_state=self.random_state,
                                           )
            self.estimator.fit(X, y)
            return self

        def predict(self, X):
            if self.estimator is None:
                raise NotImplementedError()
            return self.estimator.predict(X)

        def predict_proba(self, X):
            if self.estimator is None:
                raise NotImplementedError()
            return self.estimator.predict_proba(X)

        @staticmethod
        def get_properties(dataset_properties=None):
            return {'shortname': 'MLP Classifier',
                    'name': 'MLP CLassifier',
                    'handles_regression': False,
                    'handles_classification': True,
                    'handles_multiclass': True,
                    'handles_multilabel': False,
                    'handles_multioutput': False,
                    'is_deterministic': False,
                    # Both input and output must be tuple(iterable)
                    'input': [DENSE, SIGNED_DATA, UNSIGNED_DATA],
                    'output': [PREDICTIONS]
                    }

        @staticmethod
        def get_hyperparameter_search_space(dataset_properties=None):
            cs = ConfigurationSpace()
            hidden_layer_depth = UniformIntegerHyperparameter(
                name="hidden_layer_depth", lower=1, upper=3, default_value=1
            )
            num_nodes_per_layer = UniformIntegerHyperparameter(
                name="num_nodes_per_layer", lower=16, upper=216, default_value=32
            )
            activation = CategoricalHyperparameter(
                name="activation", choices=['identity', 'logistic', 'tanh', 'relu'],
                default_value='relu'
            )
            alpha = UniformFloatHyperparameter(
                name="alpha", lower=0.0001, upper=1.0, default_value=0.0001
            )
            solver = CategoricalHyperparameter(
                name="solver", choices=['lbfgs', 'sgd', 'adam'], default_value='adam'
            )
            cs.add_hyperparameters([hidden_layer_depth,
                                    num_nodes_per_layer,
                                    activation,
                                    alpha,
                                    solver,
                                    ])
            return cs


    # Add MLP classifier component to auto-sklearn.
    autosklearn.pipeline.components.classification.add_classifier(MLPClassifier)
    cs = MLPClassifier.get_hyperparameter_search_space()
    print(cs)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    /home/runner/work/auto-sklearn/auto-sklearn/examples/80_extending/example_extending_classification.py:91: DeprecationWarning: `np.int` is a deprecated alias for the builtin `int`. To silence this warning, use `int` by itself. Doing this will not modify any behavior and is safe. When replacing `np.int`, you may wish to use e.g. `np.int64` or `np.int32` to specify the precision. If you wish to review your current use, check the release note link for additional information.
    Deprecated in NumPy 1.20; for more details and guidance: https://numpy.org/devdocs/release/1.20.0-notes.html#deprecations
      hidden_layer_depth = UniformIntegerHyperparameter(
    /home/runner/work/auto-sklearn/auto-sklearn/examples/80_extending/example_extending_classification.py:94: DeprecationWarning: `np.int` is a deprecated alias for the builtin `int`. To silence this warning, use `int` by itself. Doing this will not modify any behavior and is safe. When replacing `np.int`, you may wish to use e.g. `np.int64` or `np.int32` to specify the precision. If you wish to review your current use, check the release note link for additional information.
    Deprecated in NumPy 1.20; for more details and guidance: https://numpy.org/devdocs/release/1.20.0-notes.html#deprecations
      num_nodes_per_layer = UniformIntegerHyperparameter(
    /home/runner/work/auto-sklearn/auto-sklearn/examples/80_extending/example_extending_classification.py:107: DeprecationWarning: `np.int` is a deprecated alias for the builtin `int`. To silence this warning, use `int` by itself. Doing this will not modify any behavior and is safe. When replacing `np.int`, you may wish to use e.g. `np.int64` or `np.int32` to specify the precision. If you wish to review your current use, check the release note link for additional information.
    Deprecated in NumPy 1.20; for more details and guidance: https://numpy.org/devdocs/release/1.20.0-notes.html#deprecations
      cs.add_hyperparameters([hidden_layer_depth,
    /home/runner/work/auto-sklearn/auto-sklearn/examples/80_extending/example_extending_classification.py:107: DeprecationWarning: `np.float` is a deprecated alias for the builtin `float`. To silence this warning, use `float` by itself. Doing this will not modify any behavior and is safe. If you specifically wanted the numpy scalar type, use `np.float64` here.
    Deprecated in NumPy 1.20; for more details and guidance: https://numpy.org/devdocs/release/1.20.0-notes.html#deprecations
      cs.add_hyperparameters([hidden_layer_depth,
    Configuration space object:
      Hyperparameters:
        activation, Type: Categorical, Choices: {identity, logistic, tanh, relu}, Default: relu
        alpha, Type: UniformFloat, Range: [0.0001, 1.0], Default: 0.0001
        hidden_layer_depth, Type: UniformInteger, Range: [1, 3], Default: 1
        num_nodes_per_layer, Type: UniformInteger, Range: [16, 216], Default: 32
        solver, Type: Categorical, Choices: {lbfgs, sgd, adam}, Default: adam





.. GENERATED FROM PYTHON SOURCE LINES 122-124

Data Loading
============

.. GENERATED FROM PYTHON SOURCE LINES 124-128

.. code-block:: default


    X, y = load_breast_cancer(return_X_y=True)
    X_train, X_test, y_train, y_test = train_test_split(X, y)








.. GENERATED FROM PYTHON SOURCE LINES 129-131

Fit MLP classifier to the data
==============================

.. GENERATED FROM PYTHON SOURCE LINES 131-143

.. code-block:: default


    clf = autosklearn.classification.AutoSklearnClassifier(
        time_left_for_this_task=30,
        per_run_time_limit=10,
        include_estimators=['MLPClassifier'],
        # Bellow two flags are provided to speed up calculations
        # Not recommended for a real implementation
        initial_configurations_via_metalearning=0,
        smac_scenario_args={'runcount_limit': 5},
    )
    clf.fit(X_train, y_train)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    /home/runner/work/auto-sklearn/auto-sklearn/examples/80_extending/example_extending_preprocessor.py:86: DeprecationWarning: `np.float` is a deprecated alias for the builtin `float`. To silence this warning, use `float` by itself. Doing this will not modify any behavior and is safe. If you specifically wanted the numpy scalar type, use `np.float64` here.
    Deprecated in NumPy 1.20; for more details and guidance: https://numpy.org/devdocs/release/1.20.0-notes.html#deprecations
      cs.add_hyperparameters([solver, shrinkage, tol])
    /home/runner/work/auto-sklearn/auto-sklearn/examples/80_extending/example_extending_classification.py:91: DeprecationWarning: `np.int` is a deprecated alias for the builtin `int`. To silence this warning, use `int` by itself. Doing this will not modify any behavior and is safe. When replacing `np.int`, you may wish to use e.g. `np.int64` or `np.int32` to specify the precision. If you wish to review your current use, check the release note link for additional information.
    Deprecated in NumPy 1.20; for more details and guidance: https://numpy.org/devdocs/release/1.20.0-notes.html#deprecations
      hidden_layer_depth = UniformIntegerHyperparameter(
    /home/runner/work/auto-sklearn/auto-sklearn/examples/80_extending/example_extending_classification.py:94: DeprecationWarning: `np.int` is a deprecated alias for the builtin `int`. To silence this warning, use `int` by itself. Doing this will not modify any behavior and is safe. When replacing `np.int`, you may wish to use e.g. `np.int64` or `np.int32` to specify the precision. If you wish to review your current use, check the release note link for additional information.
    Deprecated in NumPy 1.20; for more details and guidance: https://numpy.org/devdocs/release/1.20.0-notes.html#deprecations
      num_nodes_per_layer = UniformIntegerHyperparameter(
    /home/runner/work/auto-sklearn/auto-sklearn/examples/80_extending/example_extending_classification.py:107: DeprecationWarning: `np.int` is a deprecated alias for the builtin `int`. To silence this warning, use `int` by itself. Doing this will not modify any behavior and is safe. When replacing `np.int`, you may wish to use e.g. `np.int64` or `np.int32` to specify the precision. If you wish to review your current use, check the release note link for additional information.
    Deprecated in NumPy 1.20; for more details and guidance: https://numpy.org/devdocs/release/1.20.0-notes.html#deprecations
      cs.add_hyperparameters([hidden_layer_depth,
    /home/runner/work/auto-sklearn/auto-sklearn/examples/80_extending/example_extending_classification.py:107: DeprecationWarning: `np.float` is a deprecated alias for the builtin `float`. To silence this warning, use `float` by itself. Doing this will not modify any behavior and is safe. If you specifically wanted the numpy scalar type, use `np.float64` here.
    Deprecated in NumPy 1.20; for more details and guidance: https://numpy.org/devdocs/release/1.20.0-notes.html#deprecations
      cs.add_hyperparameters([hidden_layer_depth,
    /home/runner/work/auto-sklearn/auto-sklearn/examples/80_extending/example_restrict_number_of_hyperparameters.py:92: DeprecationWarning: `np.int` is a deprecated alias for the builtin `int`. To silence this warning, use `int` by itself. Doing this will not modify any behavior and is safe. When replacing `np.int`, you may wish to use e.g. `np.int64` or `np.int32` to specify the precision. If you wish to review your current use, check the release note link for additional information.
    Deprecated in NumPy 1.20; for more details and guidance: https://numpy.org/devdocs/release/1.20.0-notes.html#deprecations
      n_estimators = UniformIntegerHyperparameter("n_estimators", 10, 1000, default_value=100)
    /home/runner/work/auto-sklearn/auto-sklearn/examples/80_extending/example_restrict_number_of_hyperparameters.py:94: DeprecationWarning: `np.int` is a deprecated alias for the builtin `int`. To silence this warning, use `int` by itself. Doing this will not modify any behavior and is safe. When replacing `np.int`, you may wish to use e.g. `np.int64` or `np.int32` to specify the precision. If you wish to review your current use, check the release note link for additional information.
    Deprecated in NumPy 1.20; for more details and guidance: https://numpy.org/devdocs/release/1.20.0-notes.html#deprecations
      cs.add_hyperparameters([max_features, n_estimators])
    /home/runner/work/auto-sklearn/auto-sklearn/examples/80_extending/example_restrict_number_of_hyperparameters.py:94: DeprecationWarning: `np.float` is a deprecated alias for the builtin `float`. To silence this warning, use `float` by itself. Doing this will not modify any behavior and is safe. If you specifically wanted the numpy scalar type, use `np.float64` here.
    Deprecated in NumPy 1.20; for more details and guidance: https://numpy.org/devdocs/release/1.20.0-notes.html#deprecations
      cs.add_hyperparameters([max_features, n_estimators])

    AutoSklearnClassifier(include_estimators=['MLPClassifier'],
                          initial_configurations_via_metalearning=0,
                          per_run_time_limit=10,
                          smac_scenario_args={'runcount_limit': 5},
                          time_left_for_this_task=30)



.. GENERATED FROM PYTHON SOURCE LINES 144-146

Print test accuracy and statistics
==================================

.. GENERATED FROM PYTHON SOURCE LINES 146-150

.. code-block:: default


    y_pred = clf.predict(X_test)
    print("accuracy: ", sklearn.metrics.accuracy_score(y_pred, y_test))
    print(clf.show_models())




.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    accuracy:  0.965034965034965
    [(0.300000, SimpleClassificationPipeline({'balancing:strategy': 'none', 'classifier:__choice__': 'MLPClassifier', 'data_preprocessing:categorical_transformer:categorical_encoding:__choice__': 'one_hot_encoding', 'data_preprocessing:categorical_transformer:category_coalescence:__choice__': 'minority_coalescer', 'data_preprocessing:numerical_transformer:imputation:strategy': 'mean', 'data_preprocessing:numerical_transformer:rescaling:__choice__': 'standardize', 'feature_preprocessor:__choice__': 'no_preprocessing', 'classifier:MLPClassifier:activation': 'relu', 'classifier:MLPClassifier:alpha': 0.0001, 'classifier:MLPClassifier:hidden_layer_depth': 1, 'classifier:MLPClassifier:num_nodes_per_layer': 32, 'classifier:MLPClassifier:solver': 'adam', 'data_preprocessing:categorical_transformer:category_coalescence:minority_coalescer:minimum_fraction': 0.01},
    dataset_properties={
      'task': 1,
      'sparse': False,
      'multilabel': False,
      'multiclass': False,
      'target_type': 'classification',
      'signed': False})),
    (0.300000, SimpleClassificationPipeline({'balancing:strategy': 'weighting', 'classifier:__choice__': 'MLPClassifier', 'data_preprocessing:categorical_transformer:categorical_encoding:__choice__': 'one_hot_encoding', 'data_preprocessing:categorical_transformer:category_coalescence:__choice__': 'minority_coalescer', 'data_preprocessing:numerical_transformer:imputation:strategy': 'median', 'data_preprocessing:numerical_transformer:rescaling:__choice__': 'quantile_transformer', 'feature_preprocessor:__choice__': 'no_preprocessing', 'classifier:MLPClassifier:activation': 'identity', 'classifier:MLPClassifier:alpha': 0.9675267755357104, 'classifier:MLPClassifier:hidden_layer_depth': 1, 'classifier:MLPClassifier:num_nodes_per_layer': 179, 'classifier:MLPClassifier:solver': 'lbfgs', 'data_preprocessing:categorical_transformer:category_coalescence:minority_coalescer:minimum_fraction': 0.0026672002128496617, 'data_preprocessing:numerical_transformer:rescaling:quantile_transformer:n_quantiles': 1019, 'data_preprocessing:numerical_transformer:rescaling:quantile_transformer:output_distribution': 'uniform'},
    dataset_properties={
      'task': 1,
      'sparse': False,
      'multilabel': False,
      'multiclass': False,
      'target_type': 'classification',
      'signed': False})),
    (0.220000, SimpleClassificationPipeline({'balancing:strategy': 'weighting', 'classifier:__choice__': 'MLPClassifier', 'data_preprocessing:categorical_transformer:categorical_encoding:__choice__': 'one_hot_encoding', 'data_preprocessing:categorical_transformer:category_coalescence:__choice__': 'minority_coalescer', 'data_preprocessing:numerical_transformer:imputation:strategy': 'most_frequent', 'data_preprocessing:numerical_transformer:rescaling:__choice__': 'none', 'feature_preprocessor:__choice__': 'select_rates_classification', 'classifier:MLPClassifier:activation': 'logistic', 'classifier:MLPClassifier:alpha': 0.13368020183986326, 'classifier:MLPClassifier:hidden_layer_depth': 3, 'classifier:MLPClassifier:num_nodes_per_layer': 69, 'classifier:MLPClassifier:solver': 'sgd', 'data_preprocessing:categorical_transformer:category_coalescence:minority_coalescer:minimum_fraction': 0.2027853847566865, 'feature_preprocessor:select_rates_classification:alpha': 0.3941883601579055, 'feature_preprocessor:select_rates_classification:score_func': 'mutual_info_classif'},
    dataset_properties={
      'task': 1,
      'sparse': False,
      'multilabel': False,
      'multiclass': False,
      'target_type': 'classification',
      'signed': False})),
    (0.140000, SimpleClassificationPipeline({'balancing:strategy': 'weighting', 'classifier:__choice__': 'MLPClassifier', 'data_preprocessing:categorical_transformer:categorical_encoding:__choice__': 'one_hot_encoding', 'data_preprocessing:categorical_transformer:category_coalescence:__choice__': 'no_coalescense', 'data_preprocessing:numerical_transformer:imputation:strategy': 'mean', 'data_preprocessing:numerical_transformer:rescaling:__choice__': 'normalize', 'feature_preprocessor:__choice__': 'extra_trees_preproc_for_classification', 'classifier:MLPClassifier:activation': 'logistic', 'classifier:MLPClassifier:alpha': 0.2747944509523582, 'classifier:MLPClassifier:hidden_layer_depth': 3, 'classifier:MLPClassifier:num_nodes_per_layer': 138, 'classifier:MLPClassifier:solver': 'lbfgs', 'feature_preprocessor:extra_trees_preproc_for_classification:bootstrap': 'True', 'feature_preprocessor:extra_trees_preproc_for_classification:criterion': 'entropy', 'feature_preprocessor:extra_trees_preproc_for_classification:max_depth': 'None', 'feature_preprocessor:extra_trees_preproc_for_classification:max_features': 0.6544841036841107, 'feature_preprocessor:extra_trees_preproc_for_classification:max_leaf_nodes': 'None', 'feature_preprocessor:extra_trees_preproc_for_classification:min_impurity_decrease': 0.0, 'feature_preprocessor:extra_trees_preproc_for_classification:min_samples_leaf': 19, 'feature_preprocessor:extra_trees_preproc_for_classification:min_samples_split': 9, 'feature_preprocessor:extra_trees_preproc_for_classification:min_weight_fraction_leaf': 0.0, 'feature_preprocessor:extra_trees_preproc_for_classification:n_estimators': 100},
    dataset_properties={
      'task': 1,
      'sparse': False,
      'multilabel': False,
      'multiclass': False,
      'target_type': 'classification',
      'signed': False})),
    (0.040000, SimpleClassificationPipeline({'balancing:strategy': 'weighting', 'classifier:__choice__': 'MLPClassifier', 'data_preprocessing:categorical_transformer:categorical_encoding:__choice__': 'one_hot_encoding', 'data_preprocessing:categorical_transformer:category_coalescence:__choice__': 'minority_coalescer', 'data_preprocessing:numerical_transformer:imputation:strategy': 'most_frequent', 'data_preprocessing:numerical_transformer:rescaling:__choice__': 'quantile_transformer', 'feature_preprocessor:__choice__': 'select_percentile_classification', 'classifier:MLPClassifier:activation': 'logistic', 'classifier:MLPClassifier:alpha': 0.8201709199474462, 'classifier:MLPClassifier:hidden_layer_depth': 3, 'classifier:MLPClassifier:num_nodes_per_layer': 168, 'classifier:MLPClassifier:solver': 'sgd', 'data_preprocessing:categorical_transformer:category_coalescence:minority_coalescer:minimum_fraction': 0.0001056852029990174, 'data_preprocessing:numerical_transformer:rescaling:quantile_transformer:n_quantiles': 1609, 'data_preprocessing:numerical_transformer:rescaling:quantile_transformer:output_distribution': 'normal', 'feature_preprocessor:select_percentile_classification:percentile': 76.89272185792022, 'feature_preprocessor:select_percentile_classification:score_func': 'mutual_info'},
    dataset_properties={
      'task': 1,
      'sparse': False,
      'multilabel': False,
      'multiclass': False,
      'target_type': 'classification',
      'signed': False})),
    ]





.. rst-class:: sphx-glr-timing

   **Total running time of the script:** ( 0 minutes  17.444 seconds)


.. _sphx_glr_download_examples_80_extending_example_extending_classification.py:


.. only :: html

 .. container:: sphx-glr-footer
    :class: sphx-glr-footer-example


  .. container:: binder-badge

    .. image:: images/binder_badge_logo.svg
      :target: https://mybinder.org/v2/gh/automl/auto-sklearn/master?urlpath=lab/tree/notebooks/examples/80_extending/example_extending_classification.ipynb
      :alt: Launch binder
      :width: 150 px


  .. container:: sphx-glr-download sphx-glr-download-python

     :download:`Download Python source code: example_extending_classification.py <example_extending_classification.py>`



  .. container:: sphx-glr-download sphx-glr-download-jupyter

     :download:`Download Jupyter notebook: example_extending_classification.ipynb <example_extending_classification.ipynb>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.github.io>`_
